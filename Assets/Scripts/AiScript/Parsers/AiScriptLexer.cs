//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/butjok/Documents/GitHub/Wars5/Assets/Scripts/AiScript/AiScript.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class AiScriptLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, Whitespace=4, Comment=5, True=6, False=7, Integer=8, 
		Symbol=9, String=10;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "Whitespace", "Comment", "True", "False", "Integer", 
		"Symbol", "String"
	};


	public AiScriptLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AiScriptLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'''", null, null, "'#t'", "'#f'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "Whitespace", "Comment", "True", "False", "Integer", 
		"Symbol", "String"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AiScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AiScriptLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\f', 'H', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', '$', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', '\'', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x5', '\t', '\x32', '\n', '\t', '\x3', '\t', '\x6', '\t', '\x35', 
		'\n', '\t', '\r', '\t', '\xE', '\t', '\x36', '\x3', '\n', '\x6', '\n', 
		':', '\n', '\n', '\r', '\n', '\xE', '\n', ';', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\x42', '\n', '\v', '\f', '\v', 
		'\xE', '\v', '\x45', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x2', '\x2', 
		'\f', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', 
		'\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x3', 
		'\x2', '\b', '\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x5', 
		'\x2', '\f', '\f', '\xF', '\xF', '\"', '\"', '\x3', '\x2', '\x32', ';', 
		'\t', '\x2', '#', '#', ',', '-', '/', '/', '\x31', '\x31', '>', '@', '\x43', 
		'\\', '\x63', '|', '\t', '\x2', '$', '$', '^', '^', '\x64', '\x64', 'h', 
		'h', 'p', 'p', 't', 't', 'v', 'v', '\x5', '\x2', '\x2', '!', '$', '$', 
		'^', '^', '\x2', 'M', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\x17', '\x3', '\x2', '\x2', '\x2', '\x5', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\a', '\x1B', '\x3', '\x2', '\x2', '\x2', '\t', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\v', '!', '\x3', '\x2', '\x2', '\x2', '\r', 
		'*', '\x3', '\x2', '\x2', '\x2', '\xF', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\x31', '\x3', '\x2', '\x2', '\x2', '\x13', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x15', '=', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', 
		'\a', '*', '\x2', '\x2', '\x18', '\x4', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x1A', '\a', '+', '\x2', '\x2', '\x1A', '\x6', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', '\x1C', '\a', ')', '\x2', '\x2', '\x1C', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\t', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', ' ', '\b', '\x5', '\x2', '\x2', ' ', '\n', 
		'\x3', '\x2', '\x2', '\x2', '!', '%', '\a', '=', '\x2', '\x2', '\"', '$', 
		'\t', '\x3', '\x2', '\x2', '#', '\"', '\x3', '\x2', '\x2', '\x2', '$', 
		'\'', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', 
		'%', '&', '\x3', '\x2', '\x2', '\x2', '&', '(', '\x3', '\x2', '\x2', '\x2', 
		'\'', '%', '\x3', '\x2', '\x2', '\x2', '(', ')', '\b', '\x6', '\x2', '\x2', 
		')', '\f', '\x3', '\x2', '\x2', '\x2', '*', '+', '\a', '%', '\x2', '\x2', 
		'+', ',', '\a', 'v', '\x2', '\x2', ',', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\a', '%', '\x2', '\x2', '.', '/', '\a', 'h', '\x2', '\x2', 
		'/', '\x10', '\x3', '\x2', '\x2', '\x2', '\x30', '\x32', '\a', '/', '\x2', 
		'\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x34', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x35', '\t', '\x4', '\x2', '\x2', '\x34', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x38', ':', '\t', '\x5', '\x2', '\x2', 
		'\x39', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', 
		'\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x14', '\x3', '\x2', '\x2', '\x2', '=', '\x43', '\a', 
		'$', '\x2', '\x2', '>', '?', '\a', '^', '\x2', '\x2', '?', '\x42', '\t', 
		'\x6', '\x2', '\x2', '@', '\x42', '\n', '\a', '\x2', '\x2', '\x41', '>', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'G', '\a', '$', '\x2', '\x2', 'G', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'\t', '\x2', '%', '\x31', '\x36', ';', '\x41', '\x43', '\x3', '\b', '\x2', 
		'\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
